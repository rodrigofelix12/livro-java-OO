Em java o nome de uma classe sempre se inicia com letra minuscula e, quando
necessario, as palavras seguintes tambem tem seu case alterado. Dessa forma
"esse nome de classe" vira "EsseNomeDeClasse".
	Esta e uma linguagem case sensitive, ou seja, leva em consideraçao o case
(caixa) em que as instruçoes sao escritas. Escrever System com letra minuscula,
por exemplo, resultaria em um erro de compilaçao.

	Entendendo o metodo main
Ao ser executada, a maquina virtual procura pelo bloco main declarado em sua classe.
Suas aplicaçoes java, em geral, vao possuir apenas um metodo main, um unico ponto
de partida. 

	Tipos Primitivos
Vimos que e possivel representar um numero com ponto flutuante utilizando o tipo
double, mas existem diversos outros tipos para representar os diferentes valores
com que trabalhamos no dia a dia.
Um detalhe simples, porem muito importante, sobre os tipos primitivos e que, 
quando voce atribui um valor para eles (utilizando o operador =), este valor
sera copiado para a sua variavel.

	Casting de Valores
Nem todos os valores sao compativeis. Por exemplo, se eu declarar o valor de 
nossos livros na CalculadoraDeEstoque como um int, um erro de compilaçao 
acontecera.
	
	Trabalhando com Continue e Break
Voce pode utilizar a palavra-chave continue para pular uma iteraçao de seu
looping e forçar a execuçao do proximo laço.
Outra possibilidade comum e parar a execuçao de um looping dada uma determinada
condiçao.

	Orientaçao a Objetos
A linguagem Java tem como forte caracteristica ter como paradigma a Orientaçao a
Objetos, que estudaremos profundamente no decorrer do livro. Esse paradigma
existe desde a decada de 70, mas foi depois do surgimento do Java que ficou 
bastante famoso e que passou a ser levado mais a serio.
Nossa CalculadoraDeEstoque esta fazendo todo o trabalho dentro de seu metodo main,
ainda de forma muito procedural. A orientaçao a objetos propoe uma maneira
diferente de fazer isso, voce passa a trabalhar de um jeito mais proximo a
realidade humana. Para cada necessidade importante teremos objetos que interagem
entre si e que sao compostos por estado (atributos) e comportamentos (metodos).
O grande problema do paradigma procedural e que nao existe uma forma simples
de conectar todos esses elementos, ja na orientaçao a objetos podemos fazer
isso de um jeito muito simples. Assim como no contexto real, podemos criar
um objeto para representar tudo o que um livro tem e o que ele faz.

	Classe x Objeto
Uma classe e apenas um molde. Uma especificaçao que define para a maquina
virtual o que um objeto desse tipo devera ter e como ele deve se comportar.
Nossa livraria podera ter milhares de livros (objetos), mas existira apenas
uma classe Livro (molde). Cada objeto que criarmos do tipo Livro tera seus 
proprios valores, ou seja, cada livro tera o seu proprio nome, sua descriçao,
um valor e um numero de ISBN.

Criar metodos dentro das classes que representam moldes podem ser muito uteis, 
uma vez que nosso codigo agora tem uma manutenibilidade muito maior. Sempre
devemos criar metodos de forma generica e reaproveitavel, assim sera muito
mais facil e produtivo evoluir o codigo no futuro.

	Referencia a objetos
E fundamental perceber que, quando instanciamos um novo objeto com a palavra
reservada new, um Autor por exemplo, guardamos em sua variavel uma referencia
para esse objeto, e nao seus valores. Ou seja, a variavel autor nao guarda o
valor de um nome, email e outros atributos da classe Autor, mas sim uma forma
de acessar esses atributos do autor em memoria. Muito diferente de quando
trabalhamos com tipos primitivos que guardam uma copia do valor.

	Nomes ambiguos e o THIS
Ainda que seja opcional, e sempre uma boa pratica usar o this em atributos
para evitar futuros problemas de ambiguidade e tambem para deixar claro que este
e um atributo da classe, e nao uma simples variavel.

	Entendendo a construçao de um Objeto
Quando escrevemos a instruçao Livro() seguida da palavra reservada new, estamos
pedindo para a JVM procurar a classe Livro e invocar o seu construtor, que se
parece com:
public Livro(){
}
Um construtor e bastante parecido com um metodo comum, mas ele nao e um.
Diferente dos metodos, um construtor tem o mesmo nome da classe e nao tem um
retorno declarado. Mas, se nunca escrevermos esse construtor, quem o fez? 
Sempre que voce nao criar um construtor para suas classes, o compilador fara
isso para voce. Agora que ja temos um construtor, o compilador nao vai criar
mais nenhum. Ele so faz isso quando a sua classe nao tem nenhum construtor
definido. Veremos mais adiante que construtores tambem podem receber parametros
e inicializar os atributos de suas classes.

	Vantagens da Orientaçao a Objetos
Vimos neste capitulo apenas algumas das muitas vantagens de se trabalhar com 
orientaçao a objetos. Observe com atençao o codigo que criamos. Voce vai conseguir
perceber que uma das grandes diferenças da OO e que temos uma forma forte de
criar conexao entre informaçoes e funcionalidades. Alem disso, nosso codigo fica
muito mais organizado e evitamos muita repetiçao. O que ganhamos? Um codigo mais
flexivel e, com isso, mais facil de evoluir e manter.

Continuar do Capitulo 4 - Encapsulamento
Continuar do Capitulo 5 - Herança e Polimorfismo


Ao utilizar a palavra reservada extends, estamos dizendo que um Ebook (subclasse)
herda tudo o que a classe Livro (superclasse) tem. Portanto, mesmo sem ter
nenhum desses metodos declarados diretamente na classe Ebook, podemos executar
o seguinte codigo sem nenhum problema:
Ebook ebook = new Ebook();
ebook.setNome("Java 8 pratico");

Herança Multipla
	Uma regra importante da herança em Java e que nossas classes so podem herdar
	diretamente de uma classe pai. Ou seja, nao ha herança multipla como na 
	linguagem c++. Mas sim, uma classe pode herdar de uma classe que herda de outra
	e assim por diante. Voce pode encadear a herança de suas classes, no entanto,
	veremos mais a frente que essa estrategia nao e muito interessante por aumentar
	demais o acoplamento entre suas classes.
	
Uma forma interessante e simples de resolver o problema de visibilidade do atributo
valor na classe Ebook e utilizando a interface da classe pai, seus proprios
metodos. Por exemplo, no lugar de acessar o atributo diretamente, poderiamos
utilizar os metodos getValor e setValor. Dessa forma, nao perderemos nem um
pouco do encapsulamento da classe Livro! Garantir que o encapsulamento das
classes e fundamental. Ainda que um pouco, quando liberamos acesso dos atributos
da superclasse para suas classes filhas, estamos violando o encapsulamento
dessa classe.
Apesar do Polimorfismo, em Java, o metodo executado sempre sera escolhido em 
tempo de execuçao (runtime) e nao em compilaçao. Ou seja, a JVM vai localizar
o objeto instanciado em memoria, um Ebook por exemplo, e chamar o metodo
aplicaDescontoDe de sua classe e nao da classe Livro, que e o tipo pelo qual
ele foi referenciado.

Capitulo 6 - Classe Abstrata

Afinal, o que e um Livro agora? Um Ebook ou um LivroFisico? Na verdade, nenhum
dos dois. Um livro e apenas uma abstraçao de tudo que os diferentes tipos de 
livro devem ter(herdar) em nossa livraria. Ao fazer uma venda, queremos saber
ao certo o tipo de livro que esta sendo vendido, nunca deveriamos permitir a
venda de um Livro, mas sim de suas subclasses. Para nossa sorte, ha uma forma
bem simples de impedir que a classe Livro seja instanciada e utilizada dessa
forma: podemos simplesmente adicionar em sua declaraçao o modificador abstract.

Por que precisamos da Classe Livro?
Afinal, para que serve a classe Livro, se nao podemos mais instancia-la? Lembre-se
que essa classe idealiza tudo o que um Livro tem, ela ainda esta sendo muito
util isolando todos os atributos e comportamentos que sao um padrao entre os
diferentes tipos de livro. A classe passa a servir exclusivamente para herança e 
polimorfismo, que sao recursos bastante uteis e poderosos.

Quando uma classe deve ser abstrata?
	Quando voce for planejar a hierarquia e herança de suas classes, voce vera
que algumas classes sao bastante especificas e que jamais deveriam ser instanciadas.
A classe Animal pode ser vista como um exemplo. O que exatamente e um Animal? Poderia
ser um Leao, um Pinguim ou qualquer outro Animal do planeta. Essa classe pode
definir tudo o que todos os animais tem em comum, mas cada tipo de Animal tem
suas particularidades e deve ser representado de uma forma propria.

Toda classe abstrata, como e o caso da nossa classe Livro, pode ter metodos
abstratos. Toda classe filha (subclasse) concreta (nao abstrata) e obrigada a
escrever os metodos abstratos da classe pai (superclasse), caso contrario seu 
codigo nao compilara.

Relembrando Algumas Regras

Nao e nem um pouco complicado trabalhar com classes abstratas, mas existem algumas
regras que precisam ser respeitadas. Apenas para relembrar, sao elas:

- Uma classe pode ser abstrata sem ter nenhum metodo abstrato. A partir do momento
em que ela se tornar abstrata, nenhum codigo podera mais instancia-la.
- Se voce declarar um metodo abstrato, precisara tornar a classe abstrata tambem!
Voce nao pode ter metodos abstratos em uma classe que nao e abstrata.
- Uma classe abstrata pode ter metodos abstratos e nao abstratos (concretos).
- Toda classe filha (subclasse) precisa implementar os metodos abstratos da
classe pai (superclasse). A nao ser que ela tambem seja abstrata.

Capitulo 7 -  Interface

Em Java, ha uma outra forma para se tirar proveito de todos os beneficios do 
polimorfismo sem ter que acoplar tanto suas classes com varios niveis de herança.
Voce pode estabelecer um fator em comum entre as classes, criando uma especie
de contrato. Para esse contrato, nao importa a forma como sera implementado, a 
unica coisa que importa e que seus metodos (clausulas) sejam implementados de 
alguma forma. Isso lembra algo? Sim, e bastante parecido com um metodo abstrato
cujo corpo voce so define na superclasse para que todas as subclasses herdem a
obrigaçao de implementa-lo. Esse tipo de contrato Java e conhecido com Interface.
	Uma interface nao pode ter atributos e, ate a versao 1.7 da linguagem, tambem 
nao pode ter nenhum metodo concreto, ou seja, com implementaçao. Veremos que, a 
partir do Java 1.8, isso mudou um pouco.

O uso da interface ja nos ajudou a resolver o problema de polimorfismo de nossos 
produtos. Agora ha uma forma simples e flexivel para representar qualquer Produto 
de nossa livraria.
Assim como podemos assinar diversos contratos ao longo de nossas vidas, uma classe 
tambem pode implementar diversas interfaces.Voce sempre pode e deve favorecer
interfaces para criar polimorfismo entre suas classes, seu codigo fica muito mais 
flexivel e com menor acoplamento.

Interface funcional
	Uma interface nao precisa ter um unico metodo abstrato, mas essa e uma estrutura 
bem comum. Normalmente, trabalhar com interfaces menores e uma estrategia interessante, 
afinal temos mais flexibilidade. Se alguem implementar aquela interface e porque 
realmente precisa do comportamento que ela estabelece.A partir do Java 8, as 
interfaces que obedecem essa regra de ter um unico metodo abstrato podem ser 
chamadas de interface funcional.

Capitulo 8 - Pacotes

Por enquanto nossas classes estao todas em um mesmo arquivo, dentro da pasta src.
Conforme o projeto vai evoluindo, mais e mais classes sao criadas e fica cada 
vez mais dificil manter a organizaçao de nosso projeto. Mas organizaçao nao sera 
o unico problema aqui. Com o passar do tempo, tabalharemos com classes de terceiros
(bibliotecas) e classes da propria API da linguagem, o que torna ainda maior o 
risco de criarmos uma classe com o nome igual a outra existente em alguma dessas 
bibliotecas. Em Java, classes sao agrupadas em pacotes (packages). Toda classe deve 
ser agrupada em pacotes. Isso, alem de ajudar na organizaçao de nossos projetos, ajudara 
quando houver um ambiguidade de nomes.

Nomenclatura Padrao dos Pacotes Java
Por padrao, um pacote Java sempre:
	- e escrito em letra minuscula (lowercase);
	- deve ser um nome de dominio, iniciado com com, edu, gov etc.
E muito natural que o pacote seja o seu dominio (ou da empresa), como
br.com.casadocodigo, br.com.alura ou br.com.caelum.

Nossas classes devem ser publicas para que fiquem visiveis entre os diferentes
pacotes. Para o caso de classes publicas, o arquivo .java obrigatoriamente tem 
que ter o nome da classe.

Modificadores de Acesso

Agora que nossas classes estao organizada em pacotes, podemos entender um pouco 
melhor os diferentes modificadores de acesso. Ja vimos que, para uma classe ou 
metodo ser acessado de outro pacote, eles precisam ter visibilidade public. A 
regra e clara: uma classe publica pode ser acessada por qualquer outra classe 
presente no mesmo projeto. O mesmo vale para atributos, metodos e construtores.
Tambem ja conhecemos o private. Esse modificador de acesso torna classes, atributos, 
metodos ou construtores visiveis apenas para a propria classe. Por esse motivo, 
uma classe nao deve ser anotada com private, quem podera acessa-la? Mas vimos que 
faz bastante sentido, para manter o encapsulamento, sempre deixar seus atributos 
private. Ha ainda a visibilidade default (quando nao ha modificador algum). A 
essa altura, voce ja pode ter percebido que neste caso apenas classes do mesmo 
pacote podem ter acesso aos atributos, construtores, metodos ou classes com a 
ausencia de um modificador de acesso. O ultimo modificador e o protected, que 
tentamos evitar no capitulo de herança. Todo elemento que for protected ficara 
visivel para a propria classe, para suas classes filhas e tambem para quem 
estiver no mesmo pacote. Classes tambem nao podem utilizar esse modificador de 
acesso.

Capitulo 9 - Arrays e exception