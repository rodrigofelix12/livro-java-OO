Em java o nome de uma classe sempre se inicia com letra minuscula e, quando
necessario, as palavras seguintes tambem tem seu case alterado. Dessa forma
"esse nome de classe" vira "EsseNomeDeClasse".
	Esta e uma linguagem case sensitive, ou seja, leva em consideraçao o case
(caixa) em que as instruçoes sao escritas. Escrever System com letra minuscula,
por exemplo, resultaria em um erro de compilaçao.

	Entendendo o metodo main
Ao ser executada, a maquina virtual procura pelo bloco main declarado em sua classe.
Suas aplicaçoes java, em geral, vao possuir apenas um metodo main, um unico ponto
de partida. 

	Tipos Primitivos
Vimos que e possivel representar um numero com ponto flutuante utilizando o tipo
double, mas existem diversos outros tipos para representar os diferentes valores
com que trabalhamos no dia a dia.
Um detalhe simples, porem muito importante, sobre os tipos primitivos e que, 
quando voce atribui um valor para eles (utilizando o operador =), este valor
sera copiado para a sua variavel.

	Casting de Valores
Nem todos os valores sao compativeis. Por exemplo, se eu declarar o valor de 
nossos livros na CalculadoraDeEstoque como um int, um erro de compilaçao 
acontecera.
	
	Trabalhando com Continue e Break
Voce pode utilizar a palavra-chave continue para pular uma iteraçao de seu
looping e forçar a execuçao do proximo laço.
Outra possibilidade comum e parar a execuçao de um looping dada uma determinada
condiçao.

	Orientaçao a Objetos
A linguagem Java tem como forte caracteristica ter como paradigma a Orientaçao a
Objetos, que estudaremos profundamente no decorrer do livro. Esse paradigma
existe desde a decada de 70, mas foi depois do surgimento do Java que ficou 
bastante famoso e que passou a ser levado mais a serio.
Nossa CalculadoraDeEstoque esta fazendo todo o trabalho dentro de seu metodo main,
ainda de forma muito procedural. A orientaçao a objetos propoe uma maneira
diferente de fazer isso, voce passa a trabalhar de um jeito mais proximo a
realidade humana. Para cada necessidade importante teremos objetos que interagem
entre si e que sao compostos por estado (atributos) e comportamentos (metodos).
O grande problema do paradigma procedural e que nao existe uma forma simples
de conectar todos esses elementos, ja na orientaçao a objetos podemos fazer
isso de um jeito muito simples. Assim como no contexto real, podemos criar
um objeto para representar tudo o que um livro tem e o que ele faz.

	Classe x Objeto
Uma classe e apenas um molde. Uma especificaçao que define para a maquina
virtual o que um objeto desse tipo devera ter e como ele deve se comportar.
Nossa livraria podera ter milhares de livros (objetos), mas existira apenas
uma classe Livro (molde). Cada objeto que criarmos do tipo Livro tera seus 
proprios valores, ou seja, cada livro tera o seu proprio nome, sua descriçao,
um valor e um numero de ISBN.

Criar metodos dentro das classes que representam moldes podem ser muito uteis, 
uma vez que nosso codigo agora tem uma manutenibilidade muito maior. Sempre
devemos criar metodos de forma generica e reaproveitavel, assim sera muito
mais facil e produtivo evoluir o codigo no futuro.

	Referencia a objetos
E fundamental perceber que, quando instanciamos um novo objeto com a palavra
reservada new, um Autor por exemplo, guardamos em sua variavel uma referencia
para esse objeto, e nao seus valores. Ou seja, a variavel autor nao guarda o
valor de um nome, email e outros atributos da classe Autor, mas sim uma forma
de acessar esses atributos do autor em memoria. Muito diferente de quando
trabalhamos com tipos primitivos que guardam uma copia do valor.

	Nomes ambiguos e o THIS
Ainda que seja opcional, e sempre uma boa pratica usar o this em atributos
para evitar futuros problemas de ambiguidade e tambem para deixar claro que este
e um atributo da classe, e nao uma simples variavel.

	Entendendo a construçao de um Objeto
Quando escrevemos a instruçao Livro() seguida da palavra reservada new, estamos
pedindo para a JVM procurar a classe Livro e invocar o seu construtor, que se
parece com:
public Livro(){
}
Um construtor e bastante parecido com um metodo comum, mas ele nao e um.
Diferente dos metodos, um construtor tem o mesmo nome da classe e nao tem um
retorno declarado. Mas, se nunca escrevermos esse construtor, quem o fez? 
Sempre que voce nao criar um construtor para suas classes, o compilador fara
isso para voce. Agora que ja temos um construtor, o compilador nao vai criar
mais nenhum. Ele so faz isso quando a sua classe nao tem nenhum construtor
definido. Veremos mais adiante que construtores tambem podem receber parametros
e inicializar os atributos de suas classes.

	Vantagens da Orientaçao a Objetos
Vimos neste capitulo apenas algumas das muitas vantagens de se trabalhar com 
orientaçao a objetos. Observe com atençao o codigo que criamos. Voce vai conseguir
perceber que uma das grandes diferenças da OO e que temos uma forma forte de
criar conexao entre informaçoes e funcionalidades. Alem disso, nosso codigo fica
muito mais organizado e evitamos muita repetiçao. O que ganhamos? Um codigo mais
flexivel e, com isso, mais facil de evoluir e manter.

Continuar do Capitulo 4 - Encapsulamento
Continuar do Capitulo 5 - Herança e Polimorfismo


Ao utilizar a palavra reservada extends, estamos dizendo que um Ebook (subclasse)
herda tudo o que a classe Livro (superclasse) tem. Portanto, mesmo sem ter
nenhum desses metodos declarados diretamente na classe Ebook, podemos executar
o seguinte codigo sem nenhum problema:
Ebook ebook = new Ebook();
ebook.setNome("Java 8 pratico");

Herança Multipla
	Uma regra importante da herança em Java e que nossas classes so podem herdar
	diretamente de uma classe pai. Ou seja, nao ha herança multipla como na 
	linguagem c++. Mas sim, uma classe pode herdar de uma classe que herda de outra
	e assim por diante. Voce pode encadear a herança de suas classes, no entanto,
	veremos mais a frente que essa estrategia nao e muito interessante por aumentar
	demais o acoplamento entre suas classes.
	
Uma forma interessante e simples de resolver o problema de visibilidade do atributo
valor na classe Ebook e utilizando a interface da classe pai, seus proprios
metodos. Por exemplo, no lugar de acessar o atributo diretamente, poderiamos
utilizar os metodos getValor e setValor. Dessa forma, nao perderemos nem um
pouco do encapsulamento da classe Livro! Garantir que o encapsulamento das
classes e fundamental. Ainda que um pouco, quando liberamos acesso dos atributos
da superclasse para suas classes filhas, estamos violando o encapsulamento
dessa classe.
Apesar do Polimorfismo, em Java, o metodo executado sempre sera escolhido em 
tempo de execuçao (runtime) e nao em compilaçao. Ou seja, a JVM vai localizar
o objeto instanciado em memoria, um Ebook por exemplo, e chamar o metodo
aplicaDescontoDe de sua classe e nao da classe Livro, que e o tipo pelo qual
ele foi referenciado.

Capitulo 6 - Classe Abstrata

Afinal, o que e um Livro agora? Um Ebook ou um LivroFisico? Na verdade, nenhum
dos dois. Um livro e apenas uma abstraçao de tudo que os diferentes tipos de 
livro devem ter(herdar) em nossa livraria. Ao fazer uma venda, queremos saber
ao certo o tipo de livro que esta sendo vendido, nunca deveriamos permitir a
venda de um Livro, mas sim de suas subclasses. Para nossa sorte, ha uma forma
bem simples de impedir que a classe Livro seja instanciada e utilizada dessa
forma: podemos simplesmente adicionar em sua declaraçao o modificador abstract.

Por que precisamos da Classe Livro?
Afinal, para que serve a classe Livro, se nao podemos mais instancia-la? Lembre-se
que essa classe idealiza tudo o que um Livro tem, ela ainda esta sendo muito
util isolando todos os atributos e comportamentos que sao um padrao entre os
diferentes tipos de livro. A classe passa a servir exclusivamente para herança e 
polimorfismo, que sao recursos bastante uteis e poderosos.

Quando uma classe deve ser abstrata?
	Quando voce for planejar a hierarquia e herança de suas classes, voce vera
que algumas classes sao bastante especificas e que jamais deveriam ser instanciadas.
A classe Animal pode ser vista como um exemplo. O que exatamente e um Animal? Poderia
ser um Leao, um Pinguim ou qualquer outro Animal do planeta. Essa classe pode
definir tudo o que todos os animais tem em comum, mas cada tipo de Animal tem
suas particularidades e deve ser representado de uma forma propria.

Toda classe abstrata, como e o caso da nossa classe Livro, pode ter metodos
abstratos. Toda classe filha (subclasse) concreta (nao abstrata) e obrigada a
escrever os metodos abstratos da classe pai (superclasse), caso contrario seu 
codigo nao compilara.

Relembrando Algumas Regras

Nao e nem um pouco complicado trabalhar com classes abstratas, mas existem algumas
regras que precisam ser respeitadas. Apenas para relembrar, sao elas:

- Uma classe pode ser abstrata sem ter nenhum metodo abstrato. A partir do momento
em que ela se tornar abstrata, nenhum codigo podera mais instancia-la.
- Se voce declarar um metodo abstrato, precisara tornar a classe abstrata tambem!
Voce nao pode ter metodos abstratos em uma classe que nao e abstrata.
- Uma classe abstrata pode ter metodos abstratos e nao abstratos (concretos).
- Toda classe filha (subclasse) precisa implementar os metodos abstratos da
classe pai (superclasse). A nao ser que ela tambem seja abstrata.

Capitulo 7 -  Interface

Em Java, ha uma outra forma para se tirar proveito de todos os beneficios do 
polimorfismo sem ter que acoplar tanto suas classes com varios niveis de herança.
Voce pode estabelecer um fator em comum entre as classes, criando uma especie
de contrato. Para esse contrato, nao importa a forma como sera implementado, a 
unica coisa que importa e que seus metodos (clausulas) sejam implementados de 
alguma forma. Isso lembra algo? Sim, e bastante parecido com um metodo abstrato
cujo corpo voce so define na superclasse para que todas as subclasses herdem a
obrigaçao de implementa-lo. Esse tipo de contrato Java e conhecido com Interface.
	Uma interface nao pode ter atributos e, ate a versao 1.7 da linguagem, tambem 
nao pode ter nenhum metodo concreto, ou seja, com implementaçao. Veremos que, a 
partir do Java 1.8, isso mudou um pouco.

O uso da interface ja nos ajudou a resolver o problema de polimorfismo de nossos 
produtos. Agora ha uma forma simples e flexivel para representar qualquer Produto 
de nossa livraria.
Assim como podemos assinar diversos contratos ao longo de nossas vidas, uma classe 
tambem pode implementar diversas interfaces.Voce sempre pode e deve favorecer
interfaces para criar polimorfismo entre suas classes, seu codigo fica muito mais 
flexivel e com menor acoplamento.

Interface funcional
	Uma interface nao precisa ter um unico metodo abstrato, mas essa e uma estrutura 
bem comum. Normalmente, trabalhar com interfaces menores e uma estrategia interessante, 
afinal temos mais flexibilidade. Se alguem implementar aquela interface e porque 
realmente precisa do comportamento que ela estabelece.A partir do Java 8, as 
interfaces que obedecem essa regra de ter um unico metodo abstrato podem ser 
chamadas de interface funcional.

Capitulo 8 - Pacotes

Por enquanto nossas classes estao todas em um mesmo arquivo, dentro da pasta src.
Conforme o projeto vai evoluindo, mais e mais classes sao criadas e fica cada 
vez mais dificil manter a organizaçao de nosso projeto. Mas organizaçao nao sera 
o unico problema aqui. Com o passar do tempo, tabalharemos com classes de terceiros
(bibliotecas) e classes da propria API da linguagem, o que torna ainda maior o 
risco de criarmos uma classe com o nome igual a outra existente em alguma dessas 
bibliotecas. Em Java, classes sao agrupadas em pacotes (packages). Toda classe deve 
ser agrupada em pacotes. Isso, alem de ajudar na organizaçao de nossos projetos, ajudara 
quando houver um ambiguidade de nomes.

Nomenclatura Padrao dos Pacotes Java
Por padrao, um pacote Java sempre:
	- e escrito em letra minuscula (lowercase);
	- deve ser um nome de dominio, iniciado com com, edu, gov etc.
E muito natural que o pacote seja o seu dominio (ou da empresa), como
br.com.casadocodigo, br.com.alura ou br.com.caelum.

Nossas classes devem ser publicas para que fiquem visiveis entre os diferentes
pacotes. Para o caso de classes publicas, o arquivo .java obrigatoriamente tem 
que ter o nome da classe.

Modificadores de Acesso

Agora que nossas classes estao organizada em pacotes, podemos entender um pouco 
melhor os diferentes modificadores de acesso. Ja vimos que, para uma classe ou 
metodo ser acessado de outro pacote, eles precisam ter visibilidade public. A 
regra e clara: uma classe publica pode ser acessada por qualquer outra classe 
presente no mesmo projeto. O mesmo vale para atributos, metodos e construtores.
Tambem ja conhecemos o private. Esse modificador de acesso torna classes, atributos, 
metodos ou construtores visiveis apenas para a propria classe. Por esse motivo, 
uma classe nao deve ser anotada com private, quem podera acessa-la? Mas vimos que 
faz bastante sentido, para manter o encapsulamento, sempre deixar seus atributos 
private. Ha ainda a visibilidade default (quando nao ha modificador algum). A 
essa altura, voce ja pode ter percebido que neste caso apenas classes do mesmo 
pacote podem ter acesso aos atributos, construtores, metodos ou classes com a 
ausencia de um modificador de acesso. O ultimo modificador e o protected, que 
tentamos evitar no capitulo de herança. Todo elemento que for protected ficara 
visivel para a propria classe, para suas classes filhas e tambem para quem 
estiver no mesmo pacote. Classes tambem nao podem utilizar esse modificador de 
acesso.

Capitulo 9 - Arrays e exception

Um array e um tipo, um objeto. Isso significa que, antes de fazer qualquer 
operaçao com o atributo produtos, precisaremos instancia-lo. A sintaxe e um 
pouco diferente, mas e bem simples.
Pode parecer um pouco assustador no começo, mas a stacktrace normalmente nos 
passa as informaçoes necessarias e fundamentais para a compreensao e resoluçao 
dos problemas. E muito comum enviarmos a stacktrace quando estamos procurando 
por ajuda em foruns ou listas de discussoes. Isso facilita bastante na investigaçao 
do problema. Ha uma forma bastante conhecida e ja utilizada em diversas linguagens 
para tentar executar um bloco de codigo de risco e capturar caso ocorra uma 
exception neste bloco, evitando que a stacktrace seja exibida para o usuario 
final e que a exceçao pare a execuçao de nosso codigo. Esse recurso e conhecido 
como try/catch. Dentro do catch podemos colocar o codigo que queremos executar 
apenas quando uma exception do tipo declarado acontecer. Ou seja, nele colocamos 
o codigo que queremos executar apenas caso um ArrayIndexOutOfBoundException ocorra.
Capturar Exception nem sempre e muito interessante, afinal se trata de um tipo
muito generico! Muitas vezes queremos dar uma tratativa diferente para cada tipo 
de exceçao do codigo. Uma alternativa para isso seria capturar mais de uma 
exception em um mesmo bloco try. Existem momentos em que precisamos executar 
alguma açao apos um try ou catch, independente se houve ou nao uma exception 
envolvida. Nesses casos, podemos utilizar uma terceira clausula chamada finally.
As instruçoes do bloco finally serao executadas sempre, independente de tudo ter 
ido bem ou de alguma exception ter acontecido. Esse recurso e muito comum quando 
estamos trabalhando com conexao do banco de dados ou leitura/escrita de arquivos.
Independente de qualquer coisa, depois de usar uma conexao, por exemplo, sempre 
queremos fecha-la. As unchecked exceptions nao herdam diretamente da classe 
Exception, mas sim de sua filha RuntimeException.
Checked Exceptions - Diferente disso, quando estamos fazendo a leitura de um 
arquivo ou qualquer outra operaçao de risco que nao pode ser facilmente evitada
(o arquivo pode nao existir, por exemplo) o compilador nos obriga a tratar esse
codigo! Esse e um outro tipo de exception da linguagem, conhecida como checked 
exception.

THROW OU THROWS?
E muito comum confundir no inicio, mas lembre-se que usamos o throw no imperativo 
quando estamos efetivamente lançando uma exception. Quando escrito no indicativo, 
o throws apenas informa ao compilador e a quem mais interessar que determinado 
metodo lança uma exception.
Nosso codigo tambem pode lançar uma exception caso algo inesperado aconteça.
E nao estou falando de lançar uma exception acidentalmente. Assim como um array 
dispara o ArrayIndexOutOfBoundException quando fazemos algo inesperado (tentar 
acessar mais valores do que o array suporta), podemos fazer isso com nossa regras.
Assim como a API do Java, podemos lançar exceptions para casos como esse. Essa e 
uma forma mais robusta do que validar e retornar um boolean ou uma mensagem que 
pode simplesmente ser ignorada.

Capitulo 10 - Conhecendo a API

Na ausencia de um construtor, o compilador adicionara um construtor vazio para 
voce. Assim e com a herança, na ausencia de um extends, o Java dira que sua classe 
extends um tipo conhecido como Object. Com isso, podemos concluir que toda classe 
em Java e um Object, sem exceçao. Pode nao ser diretamente, mas ainda que indiretamente,
ela sera, pois herdara de alguem que herda diretamente ou indiretamente de Object.
A grande vantagem desse tipo em comum e que toda classe herda alguns metodos 
declarados na classe Object e ainda podem ser referenciadas como tal.
Percebemos que receber um Object como parametro nem sempre e uma boa alternativa, 
pois sempre precisaremos de castings e mais castings, nao muito como fugir. Manter 
o tipo de parametro e array da classe RegistroDeVendas como Produto neste caso 
sera uma estrategia bem mais interessante.

Alguns dos metodos da classe Object

Vimos que o custo de fazer polimorfismo com Object pode nem sempre valer a pena,
mas isso nao invalida o quanto ela e importante para a linguagem Java. Nela, estao 
presentes todos os metodos que toda classe em Java deve ter!

O pacote java.lang

Object, String, System, classes wrappers dos tipos primitivos entre diversas 
outras estao todas presentes no pacote padrao do Java, o java.lang. Este pacote 
e automaticamente incluido em todas as suas classes, diferente de todos os demais 
da linguagem. Outra classe muito util em nosso dia a dia e a Random.

java.lang.String

Para fechar nosso passeio pelo pacote padrao do Java, vamos entender um pouco 
melhor a classe String. E muito comum confundi-la com um tipo primitivo, mas 
Strings guardam referencias a objetos. Assim como qualquer outra variavel de 
referencia, nao devemos compara-la utilizando o operador ==, mas sim o equals 
que foi reescrito na classe String para comparar cada caractere do texto. Toda 
String e imutavel. O mesmo vale para todo metodo que aplica transformaçoes da 
String, eles sempre retornam uma referencia nova para o valor transformado.
Dominar o pacote padrao do Java e um grande diferencial. Muitas vezes ja ha 
algo implementado para nos ajudar com situaçoes do dia a dia. E outras palavras, 
o pacote java.lang com certeza fara parte de sua rotina.

Capitulo 11 - Collection Framework

Manipular um array e bastante trabalhoso. Essas foram apenas algumas das muitas 
questoes que apareceriam em nosso codigo. Por esse e outros motivos, o Java2 
1.2 introduziu um conjunto de classes e interfaces bastante conhecido como 
Collections Framework. Essa robusta API traz estruturas bem mais interessantes 
para lidar com os mais diferentes tipos de dados.

ArrayList versus array

No lugar de trabalhar diretamente com arrays, podemos utilizar uma ArrayList para 
representar a multiplicidade de Produtos e nos auxiliar nas operaçoes necessarias 
em nosso CarrinhoDeCompras. Essa classe e uma das introduçoes da API de Collections.
O ArrayList tem um conjunto de metodos que, na maior parte do tempo, representam 
bem as nossas necessidades. O metodo remove pode agora receber o proprio valor 
a ser removido, mas tambem tem uma sobrecarga que recebe a posiçao que deve ser 
removida. Voce pode escolher qual opçao lhe atender melhor. Um ponto muito 
interessante e que o ArrayList, assim como as demais classes da API de Collection,
trabalham de forma generica. Caso contrario, haveria uma ArrayList para cada tipo 
de dado que precisassemos adicionar, como uma String, um int, ou mesmo uma data.
Todos os seus metodos trabalham com Object.
ArrayList<Produto> produtos = new ArrayList<Produto>();
A sintaxe pode parecer estranha no começo, mas note que a unica mudança e que 
agora estamos indicando ao compilador que essa lista deve trabalhar com Produtos.
Ha dois grandes ganhos aqui, o primeiro sera pela nao necessidade de um casting 
ao recuperar valores desta lista. O codigo fica bem mais limpo sem os castings 
e evitamos as recorrentes ClassCastExceptions. O outro ganho sera a segurança 
de que nao conseguiremos adicionar nada que nao seja do tipo Produto nessa lista.
Nao precisamos de um atributo contador, nao temos que limitar o tamanho do array, 
entre outras desvantagens comentadas.
E interessante reconhecer que um ArrayList nao e um array! Essa confusao e bastante 
comum, mas na verdade ArrayList usa um array internamente para armazenar os dados, 
mas isso esta bem encapsulado. Em nenhum momento precisaremos recuperar seu array 
interno para fazer operaçoes mais complexas, nao temos acesso a ele e nem deveriamos.
O ArrayList resolve todos os problemas que comentamos do array. Utiliza-lo, com 
certeza, sera uma melhor opçao. Mas existem outros tipos de lista que nao utilizam 
necessariamente um array internamente. Um exemplo e a LinkedList (lista ligada);
enquanto a ArrayList e mais rapida para fazer pesquisas (iterar), a LinkedList 
e mais rapida para inserir e remover elementos de suas pontas. O que todas elas 
tem em comum e a interface List, do pacote java.util. Para nao deixar nosso 
codigo dependendo de um tipo de lista especifico (acoplamento), ja que podemos 
a qualquer momento muda-las, e uma boa pratica programar voltado para a interface.
O tipo ArrayList aparece apenas no momento de instanciar a lista, em todos os 
demais pontos nos referimos a ela como uma List<Produto>. Isso torna nosso codigo 
muito mais flexivel para mudanças. Para utilizar LinkedList, bastaria mudar o 
tipo em que estamos dando new sem causar nenhum efeito colateral indesejado ao 
restante do codigo.

Normalmente trabalhamos com uma lista quando seus elementos internos podem repetir 
e sua ordem tem alguma importancia, mas note que nao e esse o caso de nossos cupons.
Um cupom e unico, nao ha repetiçoes e, alem disso, a ordem deles nao importa, 
afinal estamos utilizando esses dados apenas para consulta.
Em casos como este, podemos utilizar uma outra estrutura de dados bastante 
interessante, um conjunto (java.util.Set).
Um conjunto (ou Set em Java) funciona de forma parecida com os conjuntos da 
matematica. Ela e uma coleçao, assim como a List, mas em que nao ha repetiçao 
de seus dados internos. Alem disso, sua ordem nao e necessariamente a ordem 
em que os valores foram inseridos, isso pode variar bastante de cada implementaçao.
Assim como a List, o Set e apenas uma interface. Para utilizar um Set, precisamos 
instanciar alguma de suas implementaçoes, como a HashSet, que e uma das implementaçoes 
mais usadas.
Outra vantagem muito importante do Set e que existem implementaçoes, como o proprio 
HasSet que ja estamos utilizando, que apresentam uma performance muito melhor 
que a da List para fazer consultas (com o metodo constains, por exemplo).

JAVA.UTIL.MAP

Essa e uma necessidade muito comum: vincular um objeto a uma chave unica, para 
conseguir buscar esse valor rapidamente. Poderiamos resolver isso com uma lista, 
mas ja vimos que essa nao e a melhor estrutura quando queremos fazer buscas.
Para casos como esse voce pode utilizar uma outra estrutura de dados muito util, 
um Mapa (java.util.Map). E muito comum confundir isso, afinal ela sempre anda de 
maos dadas com as estruturas da API de Collection, mas um Map nao estende a 
interface Collection. Essa estrutura tambem e bastante conhecida como dicionario 
em outras linguagens.
Um mapa e composto por um conjunto (Set) de chaves associadas a um objeto valor.
Sua sintaxe pode aparecer um pouco intimidadora no começo, mas nao ha nada de 
tao complicado.